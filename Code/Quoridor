package Sage;

import edu.princeton.cs.algs4.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;

public class Quoridor {

	private JFrame frame;
	private int buttonWidth = 50;
	private int buttonSize = 50;
	private int verticalWallWidth = 15;
	private int verticalWallHeight = 50;
	private int rowWallWidth = 50;
	private int rowWallHeight = 15;
	private int cornerWallWidth = 15;
	private int cornerWallHeight = 15;
	private int dispX = 75;
	private int dispY = 20;
	private int offset = 50;
	private Icon iconOne;
	private Icon iconTwo;
	private String fileOne;
	private String fileTwo;
	private JButton playerOne;
	private JButton playerTwo;
	private HashMap<String, JButton> buttons;
	private HashMap<String, JButton> rWalls;
	private HashMap<String, JButton> vWalls;
	private HashMap<String, JButton> cWalls;
	private Graph graph;
	private HashMap<JButton, Integer> tileTable;
	private HashMap<JButton, Integer> wallTable;
	private Queue<JButton> tileQueue;
	private Queue<JButton> wallQueue;
	private static JMenuItem stop;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Quoridor window = new Quoridor();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Quoridor() {
		initialize();

	}

	@SuppressWarnings("deprecation")
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(130, 0, 1000, 670);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setCursor(Cursor.HAND_CURSOR);
		frame.getContentPane().setLayout(null);
		frame.setTitle("Quoridor");		
		
		menuBar();								
		createBoard();
		setPlayerImages();
		
		
	}

	private void menuBar() {
		JMenuBar menubar = new JMenuBar();	
		JMenu menu = new JMenu("Background Music");
		JMenuItem mario = new JMenuItem("Super-Mario Melody");
		JMenuItem jazz = new JMenuItem("Cafe-Jazz");
		JMenuItem starWars = new JMenuItem("Imperial Theme (Darth Vader's Theme)");
		JMenuItem christmasMusic = new JMenuItem("Christmas Music");
		JMenuItem guitar = new JMenuItem("Instrumental Guitar");
		stop = new JMenuItem("Stop Background Music");
		
		
		menu.add(jazz);
		menu.add(christmasMusic);
		menu.add(guitar);
		menu.add(mario);
		menu.add(starWars);
		
		menu.add(stop);
		
		menubar.add(menu);
		frame.setJMenuBar(menubar);
		mario.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent ev) {
		    	PlayMusic("C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder"
		    			+ "\\CSIS 2420 Final Project\\src\\Music\\super_mario_medley.wav");
		    }
		});
		
		jazz.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent ev) {
				PlayMusic(
						"C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder"
						+ "\\CSIS 2420 Final Project\\src\\Music\\Good-Morning-Cafe-Jazz.wav");
			}
		});

		starWars.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				PlayMusic(
						"C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder"
						+ "\\CSIS 2420 Final Project\\src\\Music\\The Imperial March (Darth Vader's Theme).wav");
			}
		});
		
		christmasMusic.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				PlayMusic(
						"C:\\Users\\thebl\\OneDrive\\Desktop"
						+ "\\Eclipse Folder\\CSIS 2420 Final Project\\src\\Music\\Christmas Music.wav");
			}
		});
		
		guitar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				PlayMusic(
				"C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder"
				+ "\\CSIS 2420 Final Project\\src\\Music\\Relaxing Guitar.wav");
			}
		});

	}

	private void setPlayerImages() {
		fileOne = "src\\Resources\\Tan-Pawn.png";
		fileTwo = "src\\Resources\\Black-Pawn.png";
		iconOne = resizeIcon(new ImageIcon(fileOne), buttons.get("e1").getWidth(), buttons.get("e1").getHeight());
		iconTwo = resizeIcon(new ImageIcon(fileTwo), buttons.get("e9").getWidth(), buttons.get("e9").getHeight());
		buttons.get("e1").setIcon(iconOne);
		buttons.get("e1").setBackground(Color.LIGHT_GRAY);
		buttons.get("e9").setIcon(iconTwo);
		buttons.get("e9").setBackground(Color.LIGHT_GRAY);
		frame.validate();
		frame.repaint();
	}

	private void createBoard() {
		createTiles();
		createCornerWalls();
		createVerticalWalls();
		createRowWalls();
		setPlayerImages();

		playerOne = buttons.get("e1");
		playerTwo = buttons.get("e9");
		
		JButton C1 = cWalls.get("C11");
		JButton C2 = cWalls.get("C110");
		JButton C3 = cWalls.get("C101");
		JButton C4 = cWalls.get("C1010");
		
		frame.remove(C1);
		frame.remove(C2);
		frame.remove(C3);
		frame.remove(C4);
		
		frame.validate();
		frame.repaint();

		tileTable = new HashMap<JButton, Integer>();
		graph = new Graph(new In("src\\Resources\\tiles.txt"));

		int n = 1;

		while (!tileQueue.isEmpty()) {
			JButton j = tileQueue.dequeue();
			tileTable.put(j, n);
			n++;
		}

		options();

	}

	private void createCornerWalls() {

		int[] numbers = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

		cWalls = new HashMap<>();

		for (int i : numbers) {
			int count = 1;

			for (int k : numbers) {
				count++;
				String s = Character.toString('C') + Integer.toString(k) + Integer.toString(i);
				JButton button = new JButton();
				formatCornerButtons(s, button);

				cWalls.put(s, button);
				frame.add(button);
				frame.repaint();

				int w = count * 65 + dispX + offset - 65;
				int h = (i - 1) * 65 + dispY + offset - 65;

				switch (i) {
				case 1:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 2:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 3:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 4:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 5:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 6:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 7:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 8:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 9:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);
					break;
				case 10:
					button.setBounds(w, h, cornerWallWidth, cornerWallHeight);			
				}
			}

		}
		frame.validate();
		frame.repaint();
	}

	private void createVerticalWalls() {

		int[] num1 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		int[] num2 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 };

		vWalls = new HashMap<>();

		for (int i : num1) {
			int count = 1;

			for (int k : num2) {
				count++;
				String s = Character.toString('c') + Integer.toString(i) + Integer.toString(k);
				JButton button = new JButton();
				formatVerticalButtons(s, button);

				vWalls.put(s, button);
				frame.add(button);
				frame.repaint();

				int w = count * 65 + dispX + offset;
				int h = (i - 1) * 65 + dispY;

				switch (i) {
				case 1:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 2:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 3:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 4:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 5:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 6:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 7:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 8:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);
					break;
				case 9:
					button.setBounds(w, h, verticalWallWidth, verticalWallHeight);

				}
			}

		}
		frame.validate();
		frame.repaint();
	}

	private void formatCornerButtons(String s, JButton button) {
		button.setName(s);
		button.setBorder(null);
		button.setBackground(Color.DARK_GRAY);
		button.setVisible(true);	
	}

	private void formatVerticalButtons(String s, JButton button) {
		button.setName(s);
		button.setBorder(null);
		button.setBackground(Color.white);
		button.setVisible(true);
		// button.setText(s);
		// System.out.println(s);

	}

	private void formatRowButtons(String s, JButton button) {
		button.setName(s);
		button.setBorder(null);
		button.setBackground(Color.white);
		button.setVisible(true);
		// button.setText(s);
	}

	private void formatTileButtons(String s, JButton button) {
		button.setName(s);
		button.setBorder(null);
		button.setBackground(Color.black);
		button.setVisible(true);
		// button.setText(s);

		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Move(button);
				pieceSound();
				checkPosition();
			}
		});

	}

	private void createRowWalls() {

		int[] num1 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 };
		int[] num2 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		rWalls = new HashMap<>();

		for (int i : num1) {
			int count = 1;

			for (int k : num2) {
				count++;
				String s = Character.toString('r') + Integer.toString(i) + Integer.toString(k);
				JButton button = new JButton();
				formatRowButtons(s, button);

				rWalls.put(s, button);
				frame.add(button);
				frame.repaint();

				int w = count * 65 + dispX;
				int h = (i - 1) * 65 + dispY + offset;

				switch (i) {
				case 1:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 2:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 3:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 4:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 5:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 6:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 7:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);
					break;
				case 8:
					button.setBounds(w, h, rowWallWidth, rowWallHeight);

				}
			}

		}
		frame.validate();
		frame.repaint();
	}
	
	private void checkPosition() {
		
		String str = playerOne.getName();
		String s = str.substring(1,2);		
		if(s.equals("9")) {
			endSound();
		}
		
	}

	private void options() {

		JButton playerOneMove = new JButton();
		playerOneMove.setName("moveButtonOne");
		playerOneMove.setText("Move");
		playerOneMove.setBackground(Color.white);
		playerOneMove.setBorder(new RoundedBorder(20)); // 10 is the radius
		playerOneMove.setForeground(Color.black);
		playerOneMove.setVisible(true);
		playerOneMove.setBounds(45, 550, 110, 20);
		frame.add(playerOneMove);

		JButton verticalWall = new JButton();
		verticalWall.setName("vWall");
		verticalWall.setText("Place Wall");
		verticalWall.setBackground(Color.white);
		verticalWall.setBorder(new RoundedBorder(20)); // 10 is the radius
		verticalWall.setForeground(Color.black);
		verticalWall.setVisible(true);
		verticalWall.setBounds(825, 550, 110, 20);
		frame.add(verticalWall);			

		

		JLabel player1 = new JLabel();
		player1.setName("playerOne");
		player1.setText("Player #1: ");
		player1.setBackground(Color.white);
		player1.setFont(new Font("Times_New_Roman", Font.ITALIC, 20));
		player1.setBounds(50, 10, 100, 100);
		frame.add(player1);

		JLabel player2 = new JLabel();
		player2.setName("playerTwo");
		player2.setText("Player #2: ");
		player2.setBackground(Color.white);
		player2.setFont(new Font("Times_New_Roman", Font.ITALIC, 20));
		player2.setBounds(830, 10, 100, 100);
		frame.add(player2);

		
		Queue<JButton> playerOneButtons = new Queue<JButton>();
		Queue<JButton> playerTwoButtons = new Queue<JButton>();

		String p = "p";

		for (int i = 1; i < 11; i++) {
			JButton b = new JButton();
			b.setName(p + Integer.toString(i));
			b.setBackground(Color.white);
			b.setIcon(new ImageIcon("src\\Resources\\Wall.png"));
			b.setVisible(true);
			b.setBounds(50, i * 40 + 80, 100, 15);
			playerOneButtons.enqueue(b);
			frame.add(b);			
		}	
		
		for (int i = 1; i < 11; i++) {
			JButton b = new JButton();
			b.setName(p + Integer.toString(i));
			b.setBackground(Color.white);
			b.setIcon(new ImageIcon("src\\Resources\\Wall.png"));
			b.setVisible(true);
			b.setBounds(830, i * 40 + 80, 100, 15);
			playerTwoButtons.enqueue(b);
			frame.add(b);			
		}	
		
		
		
		
		frame.validate();
		frame.repaint();

	}

	private void createTiles() {
		int[] numbers = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		char[] letters = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' };
		buttons = new HashMap<>();
		tileQueue = new Queue<JButton>();

		for (int i : numbers) {
			int count = 1;

			for (char c : letters) {
				count++;
				int w = count * 65 + dispX;
				int h = (i - 1) * 65 + dispY;
				String s = Character.toString(c) + Integer.toString(i);
				JButton button = new JButton();

				formatTileButtons(s, button);
				buttons.put(s, button);
				tileQueue.enqueue(button);
				frame.add(button);
				frame.repaint();

				switch (i) {
				case 1:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 2:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 3:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 4:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 5:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 6:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 7:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 8:
					button.setBounds(w, h, buttonWidth, buttonSize);
					break;
				case 9:
					button.setBounds(w, h, buttonWidth, buttonSize);
				}

			}

		}

		frame.validate();
		frame.repaint();

	}

	private static Icon resizeIcon(ImageIcon icon, int resizedWidth, int resizedHeight) {
		Image img = icon.getImage();
		Image resizedImage = img.getScaledInstance(resizedWidth, resizedHeight, java.awt.Image.SCALE_SMOOTH);
		return new ImageIcon(resizedImage);
	}

	private void Move(JButton newer) {				
		
		BreadthFirstPaths bfp = new BreadthFirstPaths(graph, tileTable.get(newer));

		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
			@Override
			public Void doInBackground() {

				if (bfp.distTo(tileTable.get(playerOne)) == 1 && newer != playerTwo) {
					playerOne.setIcon(null);
					playerOne.setBackground(Color.black);
					newer.setBackground(Color.LIGHT_GRAY);
					newer.setIcon(iconOne);
					playerOne = newer;										
				} 
				else if (bfp.distTo(tileTable.get(playerOne)) == 1 && newer == playerTwo) {

					String str1 = playerOne.getName();
					String str2 = playerTwo.getName();
					String s1 = str1.substring(0, 1);
					String s2 = str1.substring(1, 2);
					String s3 = str2.substring(0, 1);
					String s4 = str2.substring(1, 2);

					char c1 = s1.charAt(0);
					char c2 = s3.charAt(0);
					int i1 = Integer.parseInt(s2);
					int i2 = Integer.parseInt(s4);

					if (c1 == c2 && i2 != 9) {

						if (i1 < i2) {

							JButton b = buttons.get(c1 + Integer.toString(i2 + 1));
							playerOne.setIcon(null);
							playerOne.setBackground(Color.black);
							b.setBackground(Color.LIGHT_GRAY);
							b.setIcon(iconOne);
							playerOne = b;

						} 
						else if (i1 > i2) {

							JButton b = buttons.get(c1 + Integer.toString(i2 - 1));
							playerOne.setIcon(null);
							playerOne.setBackground(Color.black);
							b.setBackground(Color.LIGHT_GRAY);
							b.setIcon(iconOne);
							playerOne = b;
						}

					} 
					
					else if (i1 == i2 && c2 != 'a' && c2 != 'i') {

						JButton b = buttons.get("a1" + Integer.toString(1));

						if (c1 < c2) {
							switch (c2) {
						
							case 'b':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'c':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'd':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'e':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'f':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'g':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'h':
								c2++;
								b = buttons.get(String.valueOf(c2) + s4);
							}
							playerOne.setIcon(null);
							playerOne.setBackground(Color.black);
							b.setBackground(Color.LIGHT_GRAY);
							b.setIcon(iconOne);
							playerOne = b;
						}

						if (c1 > c2) {

							switch (c2) {
						
							case 'b':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'c':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'd':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'e':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'f':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'g':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);
								break;
							case 'h':
								c2--;
								b = buttons.get(String.valueOf(c2) + s4);														

							}
							playerOne.setIcon(null);
							playerOne.setBackground(Color.black);
							b.setBackground(Color.LIGHT_GRAY);
							b.setIcon(iconOne);
							playerOne = b;
						}

					}

				}
				return null;
			}

			@Override
			protected void done() {

			}
		};
		worker.execute();		
		
	}
	
	
	
	public static void PlayMusic(String location) {
		
		
			try {

				File musicPath = new File(location);

				if (musicPath.exists()) {
					AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
					Clip clip = AudioSystem.getClip();
					clip.open(audioInput);
					clip.loop(Clip.LOOP_CONTINUOUSLY);
					clip.start();
					
					stop.addActionListener(new ActionListener() {
					    public void actionPerformed(ActionEvent ev) {
					    	clip.stop();
					    }
					});
					
					
				} else {
					System.out.println("File could not be found.");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		

	}
	
	
	public static void pieceSound() {
		
		String location = "C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder\\CSIS 2420 Final Project\\src\\Music\\Pawn Sound.wav";
		
		try {

			File musicPath = new File(location);

			if (musicPath.exists()) {
				AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
				Clip clip = AudioSystem.getClip();
				clip.open(audioInput);				
				clip.start();												
				
			} else {
				System.out.println("File could not be found.");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	

	}
	
	public static void intoSound() {
		
		String location = "C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder\\CSIS 2420 Final Project\\src\\Music\\Cinematic-Percussion-Sketch.wav";
		
		try {

			File musicPath = new File(location);

			if (musicPath.exists()) {
				AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
				Clip clip = AudioSystem.getClip();
				clip.open(audioInput);				
				clip.start();												
				
			} else {
				System.out.println("File could not be found.");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	

	}
	
	public static void endSound() {
		
		String location = "C:\\Users\\thebl\\OneDrive\\Desktop\\Eclipse Folder"
				+ "\\CSIS 2420 Final Project\\src\\Music\\Grand Piano Win.wav";
		
		try {

			File musicPath = new File(location);

			if (musicPath.exists()) {
				AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
				Clip clip = AudioSystem.getClip();
				clip.open(audioInput);				
				clip.start();												
				
			} else {
				System.out.println("File could not be found.");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	

	}
	
}

